// Helper Functions

@function list-join($list, $separator) {
  @if length($list) == 0 {@return "";}
  @if length($list) == 1 {@return nth($list, 1);}
  $result: nth($list, 1);
  @for $i from 2 through length($list) {
    $result: $result + $separator;
    $result: $result + nth($list, $i);
  }
  @return $result;
}

@function list-map($list, $fn) {
  $result: ();
  $i: 1;
  @each $item in $list {
    $result: append($result, call($fn, nth($list, $i)), comma);
    $i: $i + 1;
  }
  @return $result;
}

@function gcd($x, $y) {
  @return if($y == 0, $x, gcd($y, $x % $y));
}

@function lcm($x, $y) {
  @return $x * $y / gcd($x, $y);
}

@function list-reduce($list, $fn, $init) {
  $result: $init;
  @each $item in $list {
    $result: call($fn, $result, $item);
  }
  @return $result;
}

@function get-2nd-item($list) {
  @return nth($list, 2);
}

// Actual function to be tested

@function convert-frac($fs) {
  $ds: list-map($fs, get-2nd-item);
  $cd: list-reduce($ds, lcm, 1);
  $copy: $fs;
  $i: 1;
  @each $item in $copy {
    $copy: set-nth($copy, $i, "(#{nth($item, 1) * $cd / nth($item, 2)},#{$cd})");
    $i: $i + 1;
  }
  @return list-join($copy, "");
}

/*
.example {
  $input: ((1, 2), (1, 3), (1, 4));
  input: $input;
  expected: "(6,12)(4,12)(3,12)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(6,12)(4,12)(3,12)";
}

.test-1 {
  $input: ((2, 5), (3, 8), (5, 6), (1, 4));
  input: $input;
  expected: "(48,120)(45,120)(100,120)(30,120)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(48,120)(45,120)(100,120)(30,120)";
}

.test-2 {
  $input: ((2, 3), (1, 3), (1, 4), (3, 4), (7, 10), (9, 10), (1, 10));
  input: $input;
  expected: "(40,60)(20,60)(15,60)(45,60)(42,60)(54,60)(6,60)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(40,60)(20,60)(15,60)(45,60)(42,60)(54,60)(6,60)";
}

.test-3 {
  $input: ((1, 2), (2, 3), (1, 4), (4, 5), (5, 7), (5, 6));
  input: $input;
  expected: "(210,420)(280,420)(105,420)(336,420)(300,420)(350,420)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(210,420)(280,420)(105,420)(336,420)(300,420)(350,420)";
}

.test-4 {
  $input: ((1, 3), (2, 3), (1, 21), (2, 21), (3, 7), (4, 21), (20, 21), (5, 7));
  input: $input;
  expected: "(7,21)(14,21)(1,21)(2,21)(9,21)(4,21)(20,21)(15,21)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(7,21)(14,21)(1,21)(2,21)(9,21)(4,21)(20,21)(15,21)";
}

.test-5 {
  $input: ((1, 2), (3, 4), (5, 8), (5, 6), (7, 12), (9, 24));
  input: $input;
  expected: "(12,24)(18,24)(15,24)(20,24)(14,24)(9,24)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(12,24)(18,24)(15,24)(20,24)(14,24)(9,24)";
}

.test-6 {
  $input: ((1, 2), (1, 4), (3, 8), (5, 12), (5, 6));
  input: $input;
  expected: "(12,24)(6,24)(9,24)(10,24)(20,24)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(12,24)(6,24)(9,24)(10,24)(20,24)";
}

.test-7 {
  $input: ((1, 2), (3, 4), (1, 6), (3, 8), (7, 10), (1, 12));
  input: $input;
  expected: "(60,120)(90,120)(20,120)(45,120)(84,120)(10,120)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(60,120)(90,120)(20,120)(45,120)(84,120)(10,120)";
}

.test-8 {
  $input: ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1, 14), (3, 14));
  input: $input;
  expected: "(420,840)(630,840)(700,840)(735,840)(756,840)(770,840)(780,840)(60,840)(180,840)";
  actual: convert-frac($input);
  pass: convert-frac($input) == "(420,840)(630,840)(700,840)(735,840)(756,840)(770,840)(780,840)(60,840)(180,840)";
}
*/
